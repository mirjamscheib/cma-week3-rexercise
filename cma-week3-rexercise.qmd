---
title: "cma-week3-rexercise"
format: html
---

Git Problem; Replace main mit master wenn letzter schritt nicht geht 
# Pre-preparation 
```{r}

```

## a) Specify a temporal window v
```{r}

```

## b) Measure the distance from every point to every other point within this temporal window v
```{r}
sabi <- sabi |>
    mutate(
        nMinus2 = sqrt((lag(E, 2) - E)^2 + (lag(N, 2) - N)^2), # distance to pos -30 minutes
        nMinus1 = sqrt((lag(E, 1) - E)^2 + (lag(N, 1) - N)^2), # distance to pos -15 minutes
        nPlus1  = sqrt((E - lead(E, 1))^2 + (N - lead(N, 1))^2), # distance to pos +15 mintues
        nPlus2  = sqrt((E - lead(E, 2))^2 + (N - lead(N, 2))^2) # distance to pos +30 minutes
    )

# ---------------------------------
sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

sabi
```

## c) Remove "static points"
```{r}
sabi <- sabi |>
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

# ---------------------------------
sabi_filter |>
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Preparation 
```{r}
library("readr")
library("sf")

posmo <- read_delim("datasets/posmo_2022-05-01T00 00 00+02 00-2023-04-18T23 59 59+02 00.csv")

# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

# ------------------------------
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)

# -------------------------
posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

# ---------------------------
posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-03-23")
```

# Task 1: Segmentation 
```{r}
library("readr")
library("dplyr")
library("sf")
library("ggplot2")

# Import the downloaded csv 
wildschwein_BE <- read_delim("data/wildschwein_BE_2056.csv", ",")

# to convert it to a spatial object
# setting remove = FALSE preserves the original (E/N) columns, which come in handy later on
# wildschwein <- st_as_sf(wildschwein, coords = c("E", "N"), crs = 2056, remove = FALSE) 

# we will be only working with Sabi
# the safest way is to use POSIXct (instead of dttm) with timezone UTC so you dont have problems with summer/winter time and different timezones
sabi <- wildschwein_BE |>
  filter(TierName == "Sabi")|>
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"),
         DatetimeUTC < as.POSIXct("2015-07-03", tz = "UTC"))


# Visualize segmented data
ggplot(sabi, aes(E, N, color = DatetimeUTC)) +
  geom_point() +
  geom_path() +
  coord_equal()

# temporal visualization (visualizes Data in subsequent point steps)
sabi |>
  head(50) |>
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()

# calculates time taken from each step to the next 
# n_plus2 calculates an offset of 2 time steps
sabi <- sabi |>
  mutate(
    n_plus1 = sqrt((lead(E) - E)^2 + (lead(N) - N)^2),
    n_plus2 = sqrt((lead(E, 2) - E)^2 + (lead(N, 2) - N)^2),
    n_minus1 = sqrt((lag(E) - E)^2 + (lag(N) - N)^2),
    n_minus2 = sqrt((lag(E, 2) - E)^2 + (lag(N, 2) - N)^2)
  )

# ungroup() because when we apply when we apply rowwise() each row is a grouped individually which we don't want. 
sabi <- sabi |>
  rowwise()|>
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
  ) |>
  ungroup()

# look at stepMean values 
# stepMean usually is between 0 and 10 metres (typical stepmean) (small amount of higher values)
ggplot(sabi, aes(stepMean)) +
  geom_histogram(binwidth = 10) +
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = TRUE))

# decide on a threshold value in which i consider an animal NOT moving
# an animal is static, when the stepMean is lower than the mean of the stepMean 
sabi |>
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))|>
  ggplot(aes(E,N)) +
  geom_point(aes(color = static)) +
  geom_path() +
  coord_fixed()
```

# Task 2: Specify and apply threshold d
```{r}

```


# Task 3: Visualize segmented trajectories 
```{r}

```

# Task 4: Segment-based analysis 
```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

# filter posmo data
posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static))

head(posmo_filter)
```

# Task 5: Similarity measures 
```{r}

```

# Task 6: Calculate similarity 
```{r}

```



